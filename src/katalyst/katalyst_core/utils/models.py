import os
from enum import Enum
from pydantic import BaseModel, Field
from typing import List, Optional, Dict


class TaskType(str, Enum):
    # Development tasks
    TEST_CREATION = "test_creation"
    REFACTOR = "refactor"
    DOCUMENTATION = "documentation"
    
    # Data Science tasks
    DATA_EXPLORATION = "data_exploration"
    FEATURE_ENGINEERING = "feature_engineering"
    MODEL_TRAINING = "model_training"
    MODEL_EVALUATION = "model_evaluation"
    
    # Generic
    OTHER = "other"


class TaskInfo(BaseModel):
    description: str = Field(..., description="The task to be performed")
    task_type: TaskType = Field(..., description="Classification of the task")


class EnhancedPlannerOutput(BaseModel):
    subtasks: List[TaskInfo] = Field(
        ...,
        description="List of subtasks generated by the planner LLM, each as a single actionable instruction with task type classification.",
    )


class PlannerOutput(BaseModel):
    subtasks: List[str] = Field(
        ...,
        description="List of subtasks generated by the planner LLM, each as a single actionable instruction.",
    )


class ReplannerOutput(BaseModel):
    is_complete: bool = Field(
        ..., description="True if the overall goal is achieved, False otherwise."
    )
    subtasks: List[str] = Field(
        default_factory=list,
        description="New list of subtasks if not complete. Empty if is_complete is True.",
    )


class PlaybookEvaluation(BaseModel):
    """Model for evaluating playbook guidelines relevance and applicability."""

    relevance_score: float = Field(
        ge=0.0,
        le=1.0,
        description="Score from 0.0 to 1.0 indicating how relevant the playbook is to the current task",
    )
    is_directly_applicable: bool = Field(
        description="Whether the guidelines can be used as strict requirements"
    )
    key_guidelines: List[str] = Field(
        description="List of most relevant guideline points"
    )
    reasoning: str = Field(description="Step-by-step explanation of the evaluation")
    usage_recommendation: str = Field(
        description="How to best use these guidelines (e.g., 'strict', 'reference', 'ignore')"
    )
