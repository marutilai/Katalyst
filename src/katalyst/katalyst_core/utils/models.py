import os
from enum import Enum
from pydantic import BaseModel, Field
from typing import List, Optional, Dict


class TaskType(str, Enum):
    # Development tasks
    TEST_CREATION = "test_creation"
    REFACTOR = "refactor"
    DOCUMENTATION = "documentation"

    # Data Science tasks
    DATA_EXPLORATION = "data_exploration"
    FEATURE_ENGINEERING = "feature_engineering"
    MODEL_TRAINING = "model_training"
    MODEL_EVALUATION = "model_evaluation"

    # Generic
    OTHER = "other"


class TaskInfo(BaseModel):
    description: str = Field(..., description="The task to be performed")
    task_type: TaskType = Field(..., description="Classification of the task")


class EnhancedPlannerOutput(BaseModel):
    subtasks: List[TaskInfo] = Field(
        ...,
        description="List of subtasks generated by the planner LLM, each as a single actionable instruction with task type classification.",
    )


class PlannerOutput(BaseModel):
    subtasks: List[str] = Field(
        ...,
        description="List of subtasks generated by the planner LLM, each as a single actionable instruction.",
    )


class ReplannerOutput(BaseModel):
    is_complete: bool = Field(
        ..., description="True if the overall goal is achieved, False otherwise."
    )
    subtasks: List[str] = Field(
        default_factory=list,
        description="New list of subtasks if not complete. Empty if is_complete is True.",
    )


class RequestUserInputArgs(BaseModel):
    """Arguments for the request_user_input tool."""

    question_to_ask_user: str = Field(..., description="The question to ask the user")
    suggested_responses: List[str] = Field(
        ...,
        description="List of suggested answer options. Must be non-empty.",
        min_items=1,
    )
